{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["loader","LoadableHomePage","Promise","all","__webpack_require__","e","then","bind","Loadable","loading","XUILoader","App","react_default","a","createElement","BrowserRouter","react","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_intl_provider","loader_default","getLocaleUri","locale","concat","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2HAO2BA,uIAMrBC,UANqBD,EAMiB,kBAAME,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YALhDC,IAAS,CACPR,SACAS,QAASC,OAiBEC,mLAVX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,aALzBoB,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OACPhB,EAAAC,EAAAC,cAACe,EAAA,aAAD,CACE7B,OAAQY,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,MACRkB,aAAc,SAAAC,GAAM,uBAAAC,OAAqBD,EAArB,WAEpBpB,EAAAC,EAAAC,cAACoB,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.fb8c5730.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Loadable from \"react-loadable\";\nimport XUILoader from \"@xero/xui/react/loader\";\n\nimport \"./App.css\";\n\nconst createLoadablePage = loader =>\n  Loadable({\n    loader,\n    loading: XUILoader\n  });\n\nconst LoadableHomePage = createLoadablePage(() => import(\"./pages/HomePage\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Fragment>\n          <Route exact path=\"/\" component={LoadableHomePage} />\n        </Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from \"@xero/react-intl-provider\";\nimport XUILoader from \"@xero/xui/react/loader\";\n\nReactDOM.render(\n  <IntlProvider\n    loader={<XUILoader />}\n    getLocaleUri={locale => `/translations.${locale}.json`}\n  >\n    <App />\n  </IntlProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// document.addEventListener(\"DOMContentLoaded\", () =>\n//   window.CreateTimedOutModalIframe({\n//     baseUrl: \"https://edge.xero.com/business/timedoutmodal/1.4.0/\",\n//     loginUrl: \"http://xero.web/login\",\n//     logoutUrl: \"http://xero.web/logout\",\n//     authStatusUrl: \"http://localhost:3000/authStatus\",\n//     forgottenPasswordUrl: \"http://login.web/ForgottenPassword\",\n//     sessionTimeoutMinutes: 60,\n//     accountLockoutMinutes: 10,\n//     userDetails: {\n//       userName: \"test@test.xero.com\",\n//       firstName: \"User\"\n//     },\n//     onInit: function(timedOutModal) {\n//       // timedOutModal.show();\n//       // timedOutModal.hide();\n//       // timedOutModal.resetTimer();\n//     }\n//   })\n// );\n"],"sourceRoot":""}